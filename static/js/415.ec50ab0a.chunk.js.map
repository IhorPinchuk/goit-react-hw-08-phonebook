{"version":3,"file":"static/js/415.ec50ab0a.chunk.js","mappings":"4MAQMA,GAAQC,EAAAA,EAAAA,KA+Bd,UA7Ba,WACX,OACE,UAAC,IAAD,CAAeD,MAAOA,EAAtB,WACE,SAAC,KAAD,KACA,SAAC,KAAD,CACEE,WAAS,EACTC,GAAI,CACFC,UAAW,qBACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,UANpB,UASE,SAAC,IAAD,CACEJ,GAAI,CACFK,WAAY,IACZC,SAAU,GACVC,UAAW,UAEbC,MAAM,SACNC,UAAU,IAPZ,wDAcP,C,mGChCD,MAJkCC,EAAAA,cAAoB,MCCvC,SAASC,IAMtB,OALcD,EAAAA,WAAiBE,EAMhC,C,cCRD,EADoC,oBAAXC,QAAyBA,OAAOC,IAC9BD,OAAOC,IAAI,cAAgB,mB,SCiEtD,MApCA,SAAuBC,GACrB,IACEC,EAEED,EAFFC,SACOC,EACLF,EADFlB,MAEIqB,EAAaP,IAMbd,EAAQa,EAAAA,SAAc,WAC1B,IAAMS,EAAwB,OAAfD,EAAsBD,EAjCzC,SAA8BC,EAAYD,GACxC,MAA0B,oBAAfA,EACWA,EAAWC,IAQjC,kBACKA,GACAD,EAEN,CAmBqDG,CAAqBF,EAAYD,GAInF,OAHc,MAAVE,IACFA,EAAOE,GAAyB,OAAfH,GAEZC,CACR,GAAE,CAACF,EAAYC,IAChB,OAAoBI,EAAAA,EAAAA,KAAKV,EAAAA,SAAuB,CAC9CW,MAAO1B,EACPmB,SAAUA,GAEb,E,oBC5CKQ,EAAc,CAAC,EACrB,SAASC,EAAgBC,EAASC,EAAYV,GAA+B,IAAnBW,EAAmB,wDAC3E,OAAOlB,EAAAA,SAAc,WACnB,IAAMmB,EAAgBH,GAAUC,EAAWD,IAAyBC,EACpE,GAA0B,oBAAfV,EAA2B,CACpC,IAAMa,EAAcb,EAAWY,GACzBE,EAASL,GAAUM,EAAAA,EAAAA,GAAS,CAAC,EAAGL,GAAL,UAC9BD,EAAUI,IACRA,EAGL,OAAIF,EACK,kBAAMG,CAAN,EAEFA,CACR,CACD,OAAOL,GAAUM,EAAAA,EAAAA,GAAS,CAAC,EAAGL,GAAL,UACtBD,EAAUT,KACRe,EAAAA,EAAAA,GAAS,CAAC,EAAGL,EAAYV,EAC/B,GAAE,CAACS,EAASC,EAAYV,EAAYW,GACtC,CAqDD,MA5CA,SAAuBb,GACrB,IACEC,EAGED,EAHFC,SACOC,EAELF,EAFFlB,MACA6B,EACEX,EADFW,QAEIC,GAAaM,EAAAA,EAAAA,GAAuBT,GACpCU,EAAoBC,KAAqBX,EAMzCY,EAAcX,EAAgBC,EAASC,EAAYV,GACnDoB,EAAeZ,EAAgBC,EAASQ,EAAmBjB,GAAY,GAC7E,OAAoBK,EAAAA,EAAAA,KAAKgB,EAAkB,CACzCzC,MAAOwC,EACPrB,UAAuBM,EAAAA,EAAAA,KAAKiB,EAAAA,EAAAA,SAAmC,CAC7DhB,MAAOa,EACPpB,SAAUA,KAGf,E,SCzDKwB,EAAY,CAAC,SAMJ,SAASC,EAAcC,GAChC,IACOC,EACLD,EADF7C,MAEFkB,GAAQ6B,EAAAA,EAAAA,GAA8BF,EAAMF,GACxCK,EAAcF,EAAWG,EAAAA,GAC/B,OAAoBxB,EAAAA,EAAAA,KAAKyB,GAAqBf,EAAAA,EAAAA,GAAS,CAAC,EAAGjB,EAAO,CAChEW,QAASmB,EAAcC,EAAAA,OAAWE,EAClCnD,MAAOgD,GAAeF,IAEzB,C","sources":["pages/Home.jsx","../node_modules/@mui/private-theming/useTheme/ThemeContext.js","../node_modules/@mui/private-theming/useTheme/useTheme.js","../node_modules/@mui/private-theming/ThemeProvider/nested.js","../node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js","../node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js","../node_modules/@mui/material/styles/ThemeProvider.js"],"sourcesContent":["import {\n  CssBaseline,\n  Grid,\n  ThemeProvider,\n  Typography,\n  createTheme,\n} from '@mui/material';\n\nconst theme = createTheme();\n\nconst Home = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid\n        container\n        sx={{\n          minHeight: 'calc(100vh - 50px)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 500,\n            fontSize: 48,\n            textAlign: 'center',\n          }}\n          align=\"center\"\n          component=\"p\"\n        >\n          Register or log In to view contacts!!!\n        </Typography>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default Home;\n","import * as React from 'react';\nconst ThemeContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  ThemeContext.displayName = 'ThemeContext';\n}\nexport default ThemeContext;","import * as React from 'react';\nimport ThemeContext from './ThemeContext';\nexport default function useTheme() {\n  const theme = React.useContext(ThemeContext);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(theme);\n  }\n  return theme;\n}","const hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested';\n\n// To support composition of theme.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n    return mergedTheme;\n  }\n  return {\n    ...outerTheme,\n    ...localTheme\n  };\n}\n\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider, useTheme as usePrivateTheme } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useThemeWithoutDefault from '../useThemeWithoutDefault';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\nfunction useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {\n  return React.useMemo(() => {\n    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n    if (typeof localTheme === 'function') {\n      const mergedTheme = localTheme(resolvedTheme);\n      const result = themeId ? _extends({}, upperTheme, {\n        [themeId]: mergedTheme\n      }) : mergedTheme;\n      // must return a function for the private theme to NOT merge with the upper theme.\n      // see the test case \"use provided theme from a callback\" in ThemeProvider.test.js\n      if (isPrivate) {\n        return () => result;\n      }\n      return result;\n    }\n    return themeId ? _extends({}, upperTheme, {\n      [themeId]: localTheme\n    }) : _extends({}, upperTheme, localTheme);\n  }, [themeId, upperTheme, localTheme, isPrivate]);\n}\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n *\n * <ThemeProvider theme={theme}> // existing use case\n * <ThemeProvider theme={{ id: theme }}> // theme scoping\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme,\n    themeId\n  } = props;\n  const upperTheme = useThemeWithoutDefault(EMPTY_THEME);\n  const upperPrivateTheme = usePrivateTheme() || EMPTY_THEME;\n  if (process.env.NODE_ENV !== 'production') {\n    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);\n  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: privateTheme,\n    children: /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n      value: engineTheme,\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  /**\n   * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n   */\n  themeId: PropTypes.string\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"theme\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as SystemThemeProvider } from '@mui/system';\nimport THEME_ID from './identifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ThemeProvider(_ref) {\n  let {\n      theme: themeInput\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const scopedTheme = themeInput[THEME_ID];\n  return /*#__PURE__*/_jsx(SystemThemeProvider, _extends({}, props, {\n    themeId: scopedTheme ? THEME_ID : undefined,\n    theme: scopedTheme || themeInput\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;"],"names":["theme","createTheme","container","sx","minHeight","display","alignItems","justifyContent","fontWeight","fontSize","textAlign","align","component","React","useTheme","ThemeContext","Symbol","for","props","children","localTheme","outerTheme","output","mergeOuterLocalTheme","nested","_jsx","value","EMPTY_THEME","useThemeScoping","themeId","upperTheme","isPrivate","resolvedTheme","mergedTheme","result","_extends","useThemeWithoutDefault","upperPrivateTheme","usePrivateTheme","engineTheme","privateTheme","MuiThemeProvider","StyledEngineThemeContext","_excluded","ThemeProvider","_ref","themeInput","_objectWithoutPropertiesLoose","scopedTheme","THEME_ID","SystemThemeProvider","undefined"],"sourceRoot":""}